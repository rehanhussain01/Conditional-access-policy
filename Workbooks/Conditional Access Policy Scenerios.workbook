{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "## Find Conditional Access Policies Gaps and Potential Impact\r\n\r\n* This workbook was created to work along side the guidance provided in this link [(Click here)](https://github.com/chadmcox/Azure_AD_Conditional_Access_Policies#readme)\r\n* Each scenerio can be used to help implement a Conditional Access Policy or find users that are being missed by a policy.\r\n\r\nInstructions:  \r\n* Each item from the menu will shows results of users who do not meet a desired experience logon experience.  Each scenerio maps to an actual recommended policy that can be found in the link above.\r\n* Review the results determine if Conditional Access Policies need exclusions to minimize impact."
      },
      "name": "text - 1"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "8d2381e0-595a-4065-9cdb-a51aa499d8fa",
                  "version": "KqlParameterItem/1.0",
                  "name": "Menu",
                  "type": 2,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[{ \"value\": \"let thisTenantId = SigninLogs | take 1 | distinct AADTenantId;let guests = AADNonInteractiveUserSignInLogs | union SigninLogs | where TimeGenerated > ago(14d) | where HomeTenantId !in (thisTenantId) and HomeTenantId <> '' | distinct UserId;let excludeapps = pack_array('Windows Sign In','Microsoft Authentication Broker','Microsoft Account Controls V2','Microsoft Intune Company Portal','Microsoft Mobile Application Management');AADNonInteractiveUserSignInLogs | where TimeGenerated > ago(14d)| where Status !contains 'MFA requirement satisfied by claim in the token'| where NetworkLocationDetails !contains 'trustedNamedLocation'| extend TrustedLocation = tostring(iff(NetworkLocationDetails contains 'trustedNamedLocation', 'trustedNamedLocation','')) | union SigninLogs | where TimeGenerated > ago(14d) | where UserType <> 'Guest' and HomeTenantId == ResourceTenantId| where NetworkLocationDetails !contains 'trustedNamedLocation'| where ResultType == 0 and AuthenticationRequirement == 'singleFactorAuthentication' | extend TrustedLocation = tostring(iff(NetworkLocationDetails contains 'trustedNamedLocation', 'trustedNamedLocation','')) | where AppDisplayName  !in (excludeapps) and AppDisplayName <> ''| distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement,TrustedLocation| summarize apps=make_list(AppDisplayName) by UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement,TrustedLocation\", \"label\": \"Find user not providing mfa from untrusted networks\" , \"selected\":true},\r\n{ \"value\": \"let thisTenantId = SigninLogs | take 1 | distinct AADTenantId;let guests = AADNonInteractiveUserSignInLogs | union SigninLogs | where TimeGenerated > ago(14d) | where HomeTenantId !in (thisTenantId) and HomeTenantId <> '' | distinct UserId;let excludeapps = pack_array('Windows Sign In','Microsoft Authentication Broker','Microsoft Account Controls V2','Microsoft Intune Company Portal','Microsoft Mobile Application Management');AADNonInteractiveUserSignInLogs | where TimeGenerated > ago(14d)| where Status !contains 'MFA requirement satisfied by claim in the token'| union SigninLogs | where TimeGenerated > ago(14d) | where UserType <> 'Guest' and UserId !in (guests)| where HomeTenantId == ResourceTenantId| where ResultType == 0 and AuthenticationRequirement == 'singleFactorAuthentication' | where AppDisplayName  !in (excludeapps) and AppDisplayName <> ''| distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, Category | summarize apps=make_list(AppDisplayName) by UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement\", \"label\": \"Find user that are not providing MFA for every sign-in\" },\r\n{ \"value\": \"let thisTenantId = SigninLogs | take 1 | distinct AADTenantId;let guests = AADNonInteractiveUserSignInLogs | union SigninLogs | where TimeGenerated > ago(14d) | where HomeTenantId !in (thisTenantId) and HomeTenantId <> '' | distinct UserId;let excludeapps = pack_array('Windows Sign In','Microsoft Authentication Broker','Microsoft Account Controls V2','Microsoft Intune Company Portal','Microsoft Mobile Application Management');let AADNon = AADNonInteractiveUserSignInLogs| where TimeGenerated > ago(14d) and ResultType == 0 and AuthenticationRequirement == 'singleFactorAuthentication' | where Status !contains 'MFA requirement satisfied by claim in the token'| where UserId !in (guests)| where AppDisplayName  !in (excludeapps)| extend trustType = tostring(parse_json(DeviceDetail).trustType) | extend isCompliant = tostring(parse_json(DeviceDetail).isCompliant) | extend TrustedLocation = tostring(iff(NetworkLocationDetails contains 'trustedNamedLocation', 'trustedNamedLocation',''))| extend os = tostring(parse_json(DeviceDetail).operatingSystem) | where isCompliant <> 'true' and trustType <> 'Hybrid Azure AD joined'  | distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, TrustedLocation, trustType,isCompliant,os, Category;let AAD = SigninLogs | where TimeGenerated > ago(14d) and UserType <> 'Guest' and ResultType == 0 and AuthenticationRequirement == 'singleFactorAuthentication' | where AppDisplayName  !in (excludeapps) | where UserType <> 'Guest' and UserId !in (guests) | where HomeTenantId == ResourceTenantId  | extend trustType = tostring(DeviceDetail.trustType) | extend isCompliant = tostring(DeviceDetail.isCompliant) | extend os = tostring(DeviceDetail.operatingSystem) | extend TrustedLocation = tostring(iff(NetworkLocationDetails contains 'trustedNamedLocation', 'trustedNamedLocation',''))| where isCompliant <> 'true' and trustType <> 'Hybrid Azure AD joined'  | distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, TrustedLocation, trustType,isCompliant,os,Category;AADNon| union AAD| where AppDisplayName <> ''| summarize apps=make_set(AppDisplayName),ostypes=make_set(os) by UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, TrustedLocation,trustType,isCompliant\", \"label\": \"Find users that are not providing MFA or signing in from a trusted or compliant device\" },\r\n{ \"value\": \"let thisTenantId = SigninLogs | take 1 | distinct AADTenantId;let guests = AADNonInteractiveUserSignInLogs | union SigninLogs | where TimeGenerated > ago(14d) | where HomeTenantId !in (thisTenantId) and HomeTenantId <> '' | distinct UserId;let excludeapps = pack_array('Windows Sign In','Microsoft Authentication Broker','Microsoft Account Controls V2','Microsoft Intune Company Portal','Microsoft Mobile Application Management');let AADNon = AADNonInteractiveUserSignInLogs| where TimeGenerated > ago(14d) and ResultType == 0 and AuthenticationRequirement == 'singleFactorAuthentication' | where AppDisplayName  !in (excludeapps)| where UserId !in (guests)| where Status !contains 'MFA requirement satisfied by claim in the token'| where NetworkLocationDetails !contains 'trustedNamedLocation'| extend trustType = tostring(parse_json(DeviceDetail).trustType) | extend isCompliant = tostring(parse_json(DeviceDetail).isCompliant) | extend TrustedLocation = tostring(iff(NetworkLocationDetails contains 'trustedNamedLocation', 'trustedNamedLocation',''))| extend os = tostring(parse_json(DeviceDetail).operatingSystem) | where isCompliant <> 'true' and trustType <> 'Hybrid Azure AD joined'  | distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, TrustedLocation, trustType,isCompliant,os, Category;let AAD = SigninLogs | where TimeGenerated > ago(14d) and UserType <> 'Guest' and ResultType == 0 and AuthenticationRequirement == 'singleFactorAuthentication' | where AppDisplayName  !in (excludeapps) | where NetworkLocationDetails !contains 'trustedNamedLocation'| where UserType <> 'Guest' and UserId !in (guests)| where HomeTenantId == ResourceTenantId| extend trustType = tostring(DeviceDetail.trustType) | extend isCompliant = tostring(DeviceDetail.isCompliant) | extend os = tostring(DeviceDetail.operatingSystem) | extend TrustedLocation = tostring(iff(NetworkLocationDetails contains 'trustedNamedLocation', 'trustedNamedLocation',''))| where isCompliant <> 'true' and trustType <> 'Hybrid Azure AD joined'  | distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, TrustedLocation, trustType,isCompliant,os,Category;AADNon| union AAD| where AppDisplayName <> ''| summarize apps=make_set(AppDisplayName),ostypes=make_set(os) by UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, TrustedLocation,trustType,isCompliant\", \"label\": \"Find users that are not providing MFA or signing in from a trusted or compliant device on untrusted networks\" },\r\n{ \"value\": \"let includeapps = pack_array('Graph Explorer','Microsoft Graph PowerShell');AADNonInteractiveUserSignInLogs| where TimeGenerated > ago(14d) and ResultType == 0 and AuthenticationRequirement == 'singleFactorAuthentication'| where AppDisplayName in (includeapps) | union SigninLogs| where TimeGenerated > ago(14d) and ResultType == 0 and AuthenticationRequirement == 'singleFactorAuthentication' | where AppDisplayName in (includeapps)| distinct AppDisplayName, UserPrincipalName, ConditionalAccessStatus, AuthenticationRequirement\", \"label\": \"Find users not providing MFA when using Microsoft Graph PowerShell or Graph Explorer\" },\r\n{ \"value\": \"let includeapps = pack_array('Windows Azure Service Management API','Azure Resource Manager','Azure portal','Azure Data Lake','Application Insights API','Log Analytics API');AADNonInteractiveUserSignInLogs| union SigninLogs| where TimeGenerated > ago(14d) and ResultType == 0 and AuthenticationRequirement == 'singleFactorAuthentication' | where AADTenantId == ResourceTenantId| where  ResourceDisplayName in (includeapps) or AppDisplayName in (includeapps)| distinct AppDisplayName, UserPrincipalName, ConditionalAccessStatus, AuthenticationRequirement, ResourceDisplayName\", \"label\": \"Find users not providing MFA when signing into the Microsoft Azure Management\" },\r\n{ \"value\": \"AADNonInteractiveUserSignInLogs| union SigninLogs| where TimeGenerated > ago(14d) and ResultType == 0| extend ClientAppUsed = iff(isempty(ClientAppUsed) == true, 'Unknown', ClientAppUsed)  | extend isLegacyAuth = case(ClientAppUsed contains 'Browser', 'No', ClientAppUsed contains 'Mobile Apps and Desktop clients', 'No', ClientAppUsed contains 'Exchange ActiveSync', 'Yes', ClientAppUsed contains 'Exchange Online PowerShell','Yes', ClientAppUsed contains 'Unknown', 'Unknown', 'Yes') | where isLegacyAuth == 'Yes'| distinct UserDisplayName, UserPrincipalName, AppDisplayName, ClientAppUsed, isLegacyAuth, UserAgent, Category\", \"label\":  \"Find users still using legacy authentication\" },\r\n{ \"value\": \"let privroles = pack_array('Application Administrator','Authentication Administrator','Cloud Application Administrator','Conditional Access Administrator','Exchange Administrator','Global Administrator','Helpdesk Administrator','Hybrid Identity Administrator','Password Administrator','Privileged Authentication Administrator','Privileged Role Administrator','Security Administrator','SharePoint Administrator','User Administrator');AuditLogs | where TimeGenerated > ago(60d) and ActivityDisplayName == 'Add member to role completed (PIM activation)' and Category == 'RoleManagement' | extend Caller = tostring(InitiatedBy.user.userPrincipalName) | extend Role = tostring(TargetResources[0].displayName) | where Role in (privroles) | distinct Caller, Role\", \"label\": \"Using PIM add member to role logs, list privileged role members\" },\r\n{ \"value\": \"let privroles = pack_array('Application Administrator','Authentication Administrator','Cloud Application Administrator','Conditional Access Administrator','Exchange Administrator','Global Administrator','Helpdesk Administrator','Hybrid Identity Administrator','Password Administrator','Privileged Authentication Administrator','Privileged Role Administrator','Security Administrator','SharePoint Administrator','User Administrator');let privusers = AuditLogs | where TimeGenerated > ago(60d) and ActivityDisplayName == 'Add member to role completed (PIM activation)' and Category == 'RoleManagement' | extend Caller = tostring(InitiatedBy.user.userPrincipalName) | extend Role = tostring(TargetResources[0].displayName) | where Role in (privroles) | distinct Caller;AADNonInteractiveUserSignInLogs| union SigninLogs| where TimeGenerated > ago(14d) and UserPrincipalName in~ (privusers) and ResultType == 0 and AuthenticationRequirement == 'singleFactorAuthentication' | where AppDisplayName  <> 'Windows Sign In' and AppDisplayName <> 'Microsoft Authentication Broker' and AppDisplayName <> 'Microsoft Account Controls V2' | distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, Category\", \"label\": \"Using PIM add member to role logs, find privileged role members not providing MFA for sign-ins\" },\r\n{ \"value\": \"let privroles = pack_array('Application Administrator','Authentication Administrator','Cloud Application Administrator','Conditional Access Administrator','Exchange Administrator','Global Administrator','Helpdesk Administrator','Hybrid Identity Administrator','Password Administrator','Privileged Authentication Administrator','Privileged Role Administrator','Security Administrator','SharePoint Administrator','User Administrator');let privusers = IdentityInfo | where TimeGenerated > ago(60d) and AssignedRoles != '[]' | mv-expand AssignedRoles | extend Roles = tostring(AssignedRoles) | where Roles in (privroles) | distinct AccountUPN;AADNonInteractiveUserSignInLogs| union SigninLogs| where TimeGenerated > ago(14d) and UserPrincipalName in~ (privusers) and ResultType == 0 and AuthenticationRequirement == 'singleFactorAuthentication' | where AppDisplayName  <> 'Windows Sign In' and AppDisplayName <> 'Microsoft Authentication Broker' and AppDisplayName <> 'Microsoft Account Controls V2' | distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, Category\", \"label\": \"Using Sentinel UEBA IdentityInfo, find privileged role members not providing MFA for sign-ins\" },\r\n{ \"value\": \"let privroles = pack_array('Application Administrator','Authentication Administrator','Cloud Application Administrator','Conditional Access Administrator','Exchange Administrator','Global Administrator','Helpdesk Administrator','Hybrid Identity Administrator','Password Administrator','Privileged Authentication Administrator','Privileged Role Administrator','Security Administrator','SharePoint Administrator','User Administrator');let privusers = AuditLogs | where TimeGenerated > ago(60d) and ActivityDisplayName == 'Add member to role completed (PIM activation)' and Category == 'RoleManagement' | extend Caller = tostring(InitiatedBy.user.userPrincipalName) | extend Role = tostring(TargetResources[0].displayName) | where Role in (privroles) | distinct Caller;AADNonInteractiveUserSignInLogs | union SigninLogs | where TimeGenerated > ago(14d) and UserPrincipalName in~ (privusers) and ResultType == 0 | extend ClientAppUsed = iff(isempty(ClientAppUsed) == true, 'Unknown', ClientAppUsed)  | extend isLegacyAuth = case(ClientAppUsed contains 'Browser', 'No', ClientAppUsed contains 'Mobile Apps and Desktop clients', 'No', ClientAppUsed contains 'Exchange ActiveSync', 'Yes',ClientAppUsed contains 'Exchange Online PowerShell','Yes', ClientAppUsed contains 'Unknown', 'Unknown', 'Yes') | where isLegacyAuth == 'Yes'| distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, isLegacyAuth\", \"label\": \"Using PIM add member to role logs, find privileged role members using legacy authentication\" },\r\n{ \"value\": \"let privroles = pack_array('Application Administrator','Authentication Administrator','Cloud Application Administrator','Conditional Access Administrator','Exchange Administrator','Global Administrator','Helpdesk Administrator','Hybrid Identity Administrator','Password Administrator','Privileged Authentication Administrator','Privileged Role Administrator','Security Administrator','SharePoint Administrator','User Administrator');let privusers = IdentityInfo | where TimeGenerated > ago(60d) and AssignedRoles != '[]' | mv-expand AssignedRoles | extend Roles = tostring(AssignedRoles) | where Roles in (privroles) | distinct AccountUPN;AADNonInteractiveUserSignInLogs | union SigninLogs | where TimeGenerated > ago(14d) and UserPrincipalName in~ (privusers) and ResultType == 0 | extend ClientAppUsed = iff(isempty(ClientAppUsed) == true, 'Unknown', ClientAppUsed)  | extend isLegacyAuth = case(ClientAppUsed contains 'Browser', 'No', ClientAppUsed contains 'Mobile Apps and Desktop clients', 'No', ClientAppUsed contains 'Exchange ActiveSync', 'Yes',ClientAppUsed contains 'Exchange Online PowerShell','Yes', ClientAppUsed contains 'Unknown', 'Unknown', 'Yes') | where isLegacyAuth == 'Yes'| distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, isLegacyAuth\", \"label\": \"Using Sentinel UEBA IdentityInfo, find privileged role members using legacy authentication\" },\r\n{ \"value\": \"AADNonInteractiveUserSignInLogs | union SigninLogs | where TimeGenerated > ago(14d) | where UserPrincipalName startswith 'Sync_' | extend TrustedLocation = tostring(iff(NetworkLocationDetails contains 'trustedNamedLocation', 'trustedNamedLocation','')) | distinct IPAddress, TrustedLocation, UserPrincipalName\", \"label\": \"Find directory sync account with sign-ins on untrusted networks\" },\r\n{ \"value\": \"let includeapps = pack_array('Windows Azure Service Management API','Azure Resource Manager','Azure portal','Azure Data Lake','Application Insights API','Log Analytics API');SigninLogs| where TimeGenerated > ago(14d) and ResultType == 0 and AuthenticationRequirement == 'singleFactorAuthentication'  and UserType == 'Guest'  | where  ResourceDisplayName in (includeapps)  or AppDisplayName in (includeapps)| where AADTenantId == ResourceTenantId| distinct AppDisplayName, UserPrincipalName, ConditionalAccessStatus, AuthenticationRequirement, ResourceDisplayName\", \"label\": \"Find guest signing into Microsoft Azure Management\" },\r\n{ \"value\": \"let excludeapps = pack_array('Windows Sign In','Microsoft Authentication Broker','Microsoft Account Controls V2','Microsoft Intune Company Portal','Microsoft Mobile Application Management');SigninLogs | where TimeGenerated > ago(14d) and UserType == 'Guest' and AppDisplayName !in (excludeapps)| where ResultType == 0 and AuthenticationRequirement == 'singleFactorAuthentication'| where AADTenantId == ResourceTenantId| distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement,Category, UserType| summarize apps=make_list(AppDisplayName) by UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, Category, UserType\", \"label\": \"Find guest not providing MFA for sign-ins\" },\r\n{ \"value\": \"let excludeapps = pack_array('Windows Sign In','Microsoft Authentication Broker','Microsoft Account Controls V2','Microsoft Intune Company Portal','Microsoft Mobile Application Management');AADNonInteractiveUserSignInLogs| union SigninLogs | where TimeGenerated > ago(14d) and UserType == 'Guest' and AppDisplayName !in (excludeapps)| where ResultType == 0| where AADTenantId == ResourceTenantId| distinct AppDisplayName, UserPrincipalName| summarize guestTotal = count() by AppDisplayName\", \"label\": \"Find applications guest are using\" },\r\n{ \"value\": \"let includeapps = pack_array('Exchange Online','Microsoft 365 Search Service','Microsoft Forms','Microsoft Planner','Microsoft Stream','Microsoft Teams','Microsoft To-Do','Microsoft Flow','Microsoft Office 365 Portal','Microsoft Office client application','Microsoft Stream','Microsoft To-Do WebApp','Microsoft Whiteboard Services','Office Delve','Office Online','OneDrive','Power Apps','Power Automate','Security & compliance portal','SharePoint Online','Skype for Business Online','Skype and Teams Tenant Admin API','Sway','Yammer');AADNonInteractiveUserSignInLogs| extend trustType = tostring(parse_json(DeviceDetail).trustType) | extend isCompliant = tostring(parse_json(DeviceDetail).isCompliant) | project-away DeviceDetail| union SigninLogs| where TimeGenerated > ago(14d) and ResultType == 0| extend os = tostring(parse_json(DeviceDetail).operatingSystem) | extend trustType = tostring(parse_json(DeviceDetail).trustType) | extend isCompliant = tostring(parse_json(DeviceDetail).isCompliant) | where AADTenantId == ResourceTenantId| where  ResourceDisplayName in (includeapps) or AppDisplayName in (includeapps)| where isCompliant <> 'true' and trustType <> 'Hybrid Azure AD joined'| extend os = tostring(parse_json(DeviceDetail).operatingSystem) | distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, trustType,isCompliant,os,Category;\", \"label\": \"Find users not using compliant devices when signing into Office 365\" },\r\n{ \"value\": \"SigninLogs | where TimeGenerated > ago(14d) and ResultType == 0 and UserType <> 'Guest' | extend trustType = tostring(DeviceDetail.trustType) | where AADTenantId == ResourceTenantId | extend isCompliant = tostring(DeviceDetail.isCompliant) | extend deviceName = tostring(DeviceDetail.displayName) | extend os = tostring(DeviceDetail.operatingSystem) | extend TrustedLocation = tostring(iff(NetworkLocationDetails contains 'trustedNamedLocation', 'trustedNamedLocation','')) | where isCompliant <> 'true' and trustType <> 'Hybrid Azure AD joined' and ClientAppUsed == 'Browser' | distinct UserPrincipalName, os, deviceName, trustType, isCompliant, TrustedLocation\", \"label\": \"Find users with unmanaged devices that would be affected by no persistent browser\" },\r\n{ \"value\": \"let privroles = pack_array('Application Administrator','Authentication Administrator','Cloud Application Administrator','Conditional Access Administrator','Exchange Administrator','Global Administrator','Helpdesk Administrator','Hybrid Identity Administrator','Password Administrator','Privileged Authentication Administrator','Privileged Role Administrator','Security Administrator','SharePoint Administrator','User Administrator');let privusers = AuditLogs | where TimeGenerated > ago(60d) and ActivityDisplayName == 'Add member to role completed (PIM activation)' and Category == 'RoleManagement' | extend Caller = tostring(InitiatedBy.user.userPrincipalName) | extend Role = tostring(TargetResources[0].displayName) | where Role in (privroles) | distinct Caller;SigninLogs | where TimeGenerated > ago(14d) and UserPrincipalName in~ (privusers) and ResultType == 0 | extend trustType = tostring(parse_json(DeviceDetail).trustType) | extend isCompliant = tostring(parse_json(DeviceDetail).isCompliant) | extend TrustedLocation = tostring(iff(NetworkLocationDetails contains 'trustedNamedLocation', 'trustedNamedLocation',''))| extend os = tostring(parse_json(DeviceDetail).operatingSystem) | where isCompliant <> 'true' and trustType <> 'Hybrid Azure AD joined'  | distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, TrustedLocation, trustType,isCompliant,os, Category\", \"label\": \"Using PIM add member to role logs, find privileged role members using unmanaged devices\" },\r\n{ \"value\": \"let privroles = pack_array('Application Administrator','Authentication Administrator','Cloud Application Administrator','Conditional Access Administrator','Exchange Administrator','Global Administrator','Helpdesk Administrator','Hybrid Identity Administrator','Password Administrator','Privileged Authentication Administrator','Privileged Role Administrator','Security Administrator','SharePoint Administrator','User Administrator');let privusers = IdentityInfo | where TimeGenerated > ago(60d) and AssignedRoles != '[]' | mv-expand AssignedRoles | extend Roles = tostring(AssignedRoles) | where Roles in (privroles) | distinct AccountUPN;SigninLogs | where TimeGenerated > ago(14d) and UserPrincipalName in~ (privusers) and ResultType == 0 | extend trustType = tostring(parse_json(DeviceDetail).trustType) | extend isCompliant = tostring(parse_json(DeviceDetail).isCompliant) | extend TrustedLocation = tostring(iff(NetworkLocationDetails contains 'trustedNamedLocation', 'trustedNamedLocation',''))| extend os = tostring(parse_json(DeviceDetail).operatingSystem) | where isCompliant <> 'true' and trustType <> 'Hybrid Azure AD joined'  | distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, TrustedLocation, trustType,isCompliant,os, Category\", \"label\": \"Using Sentinel UEBA IdentityInfo, find privileged role members using unmanaged devices\" },\r\n{ \"value\": \"SigninLogs | where TimeGenerated > ago(14d) | where RiskState == 'atRisk' and RiskLevelAggregated == 'high'| project AppDisplayName, UserPrincipalName, RiskLevelAggregated, RiskLevelDuringSignIn, RiskState, RiskDetail,IsRisky, RiskEventTypes_V2, MfaDetail, ConditionalAccessStatus, AuthenticationRequirement, ResultType\", \"label\": \"Find users with high risk level\" },\r\n{ \"value\": \"SigninLogs | where TimeGenerated > ago(14d) and ResultType == 0 and UserType <> 'Guest'| where RiskLevelDuringSignIn in ('high') | project ResultType, ResultDescription,AppDisplayName, UserPrincipalName, RiskLevelAggregated, RiskLevelDuringSignIn, RiskState, RiskDetail, RiskEventTypes_V2, ConditionalAccessStatus, AuthenticationRequirement\", \"label\": \"Find users with high sign-in risk\" },\r\n{ \"value\": \"SigninLogs | where TimeGenerated > ago(14d) and ResultType == 0 and UserType <> 'Guest'| where RiskLevelDuringSignIn in ('high','medium','low') | distinct AppDisplayName, UserPrincipalName, RiskLevelAggregated, RiskLevelDuringSignIn, RiskState, RiskDetail, RiskEventTypes_V2, ConditionalAccessStatus, AuthenticationRequirement\", \"label\": \"Find users with low, medium and high sign-in risk\" },\r\n{ \"value\": \"let privroles = pack_array('Application Administrator','Authentication Administrator','Cloud Application Administrator','Conditional Access Administrator','Exchange Administrator','Global Administrator','Helpdesk Administrator','Hybrid Identity Administrator','Password Administrator','Privileged Authentication Administrator','Privileged Role Administrator','Security Administrator','SharePoint Administrator','User Administrator');let privusers = AuditLogs | where TimeGenerated > ago(60d) and ActivityDisplayName == 'Add member to role completed (PIM activation)' and Category == 'RoleManagement' | extend Caller = tostring(InitiatedBy.user.userPrincipalName) | extend Role = tostring(TargetResources[0].displayName) | where Role in (privroles) | distinct Caller;SigninLogs | where TimeGenerated > ago(14d) and UserPrincipalName in~ (privusers) and RiskLevelAggregated in ('high','medium','low') | project AppDisplayName, UserPrincipalName, RiskLevelAggregated, RiskLevelDuringSignIn, RiskState, RiskDetail, RiskEventTypes_V2, ConditionalAccessStatus, AuthenticationRequirement, Category\", \"label\": \"Using PIM add member to role logs, find privileged role members with low, medium and high risk level\" },\r\n{ \"value\": \"let privroles = pack_array('Application Administrator','Authentication Administrator','Cloud Application Administrator','Conditional Access Administrator','Exchange Administrator','Global Administrator','Helpdesk Administrator','Hybrid Identity Administrator','Password Administrator','Privileged Authentication Administrator','Privileged Role Administrator','Security Administrator','SharePoint Administrator','User Administrator');let privusers = IdentityInfo | where TimeGenerated > ago(60d) and AssignedRoles != '[]' | mv-expand AssignedRoles | extend Roles = tostring(AssignedRoles) | where Roles in (privroles) | distinct AccountUPNSigninLogs | where TimeGenerated > ago(14d) and UserPrincipalName in~ (privusers) and RiskLevelAggregated in ('high','medium','low') | project AppDisplayName, UserPrincipalName, RiskLevelAggregated, RiskLevelDuringSignIn, RiskState, RiskDetail, RiskEventTypes_V2, ConditionalAccessStatus, AuthenticationRequirement, Category\", \"label\": \"Using Sentinel UEBA IdentityInfo, find privileged role members with low, medium and high risk level\" },\r\n{ \"value\": \"let privroles = pack_array('Application Administrator','Authentication Administrator','Cloud Application Administrator','Conditional Access Administrator','Exchange Administrator','Global Administrator','Helpdesk Administrator','Hybrid Identity Administrator','Password Administrator','Privileged Authentication Administrator','Privileged Role Administrator','Security Administrator','SharePoint Administrator','User Administrator');let privusers = AuditLogs | where TimeGenerated > ago(60d) and ActivityDisplayName == 'Add member to role completed (PIM activation)' and Category == 'RoleManagement' | extend Caller = tostring(InitiatedBy.user.userPrincipalName) | extend Role = tostring(TargetResources[0].displayName) | where Role in (privroles) | distinct Caller;SigninLogs | where TimeGenerated > ago(14d) and UserPrincipalName in~ (privusers) and RiskLevelDuringSignIn in ('high','medium','low') | project AppDisplayName, UserPrincipalName, RiskLevelAggregated, RiskLevelDuringSignIn, RiskState, RiskDetail, RiskEventTypes_V2, ConditionalAccessStatus, AuthenticationRequirement, Category\", \"label\": \"Using PIM add member to role logs, find privileged role members with low, medium and high sign-in risk\" },\r\n{ \"value\": \"let privroles = pack_array('Application Administrator','Authentication Administrator','Cloud Application Administrator','Conditional Access Administrator','Exchange Administrator','Global Administrator','Helpdesk Administrator','Hybrid Identity Administrator','Password Administrator','Privileged Authentication Administrator','Privileged Role Administrator','Security Administrator','SharePoint Administrator','User Administrator');let privusers = IdentityInfo | where TimeGenerated > ago(60d) and AssignedRoles != '[]' | mv-expand AssignedRoles | extend Roles = tostring(AssignedRoles) | where Roles in (privroles) | distinct AccountUPN;SigninLogs | where TimeGenerated > ago(14d) and UserPrincipalName in~ (privusers) and RiskLevelDuringSignIn in ('high','medium','low') | project AppDisplayName, UserPrincipalName, RiskLevelAggregated, RiskLevelDuringSignIn, RiskState, RiskDetail, RiskEventTypes_V2, ConditionalAccessStatus, AuthenticationRequirement, Category\", \"label\": \"Using Sentinel UEBA IdentityInfo, find privileged role members with low, medium and high sign-in risk\" },\r\n{ \"value\": \"let syncaccount = 'sync_';AADNonInteractiveUserSignInLogs | union SigninLogs| where TimeGenerated > ago(14d) | where UserPrincipalName startswith syncaccount| where RiskLevelDuringSignIn in ('high','medium','low') | project AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement,Category,RiskLevelDuringSignIn,RiskDetail \", \"label\": \"Find directory sync accounts with low, medium and high sign-in risk\" },\r\n{ \"value\": \"SigninLogs | where TimeGenerated > ago(14d) and UserType == 'Guest' and ResultType == 0 | where AADTenantId <> HomeTenantId| where RiskLevelDuringSignIn in ('high','medium') | distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement,Category,RiskLevelDuringSignIn,RiskDetail | summarize apps=make_list(AppDisplayName) by UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, RiskLevelDuringSignIn,RiskDetail\", \"label\": \"Find guest with medium and high sign-in risk\" }]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "let thisTenantId = SigninLogs | take 1 | distinct AADTenantId;let guests = AADNonInteractiveUserSignInLogs | union SigninLogs | where TimeGenerated > ago(14d) | where HomeTenantId !in (thisTenantId) and HomeTenantId <> '' | distinct UserId;let excludeapps = pack_array('Windows Sign In','Microsoft Authentication Broker','Microsoft Account Controls V2','Microsoft Intune Company Portal','Microsoft Mobile Application Management');let AADNon = AADNonInteractiveUserSignInLogs| where TimeGenerated > ago(14d) and ResultType == 0 and AuthenticationRequirement == 'singleFactorAuthentication' | where AppDisplayName  !in (excludeapps)| where UserId !in (guests)| where Status !contains 'MFA requirement satisfied by claim in the token'| where NetworkLocationDetails !contains 'trustedNamedLocation'| extend trustType = tostring(parse_json(DeviceDetail).trustType) | extend isCompliant = tostring(parse_json(DeviceDetail).isCompliant) | extend TrustedLocation = tostring(iff(NetworkLocationDetails contains 'trustedNamedLocation', 'trustedNamedLocation',''))| extend os = tostring(parse_json(DeviceDetail).operatingSystem) | where isCompliant <> 'true' and trustType <> 'Hybrid Azure AD joined'  | distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, TrustedLocation, trustType,isCompliant,os, Category;let AAD = SigninLogs | where TimeGenerated > ago(14d) and UserType <> 'Guest' and ResultType == 0 and AuthenticationRequirement == 'singleFactorAuthentication' | where AppDisplayName  !in (excludeapps) | where NetworkLocationDetails !contains 'trustedNamedLocation'| where UserType <> 'Guest' and UserId !in (guests)| where HomeTenantId == ResourceTenantId| extend trustType = tostring(DeviceDetail.trustType) | extend isCompliant = tostring(DeviceDetail.isCompliant) | extend os = tostring(DeviceDetail.operatingSystem) | extend TrustedLocation = tostring(iff(NetworkLocationDetails contains 'trustedNamedLocation', 'trustedNamedLocation',''))| where isCompliant <> 'true' and trustType <> 'Hybrid Azure AD joined'  | distinct AppDisplayName,UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, TrustedLocation, trustType,isCompliant,os,Category;AADNon| union AAD| where AppDisplayName <> ''| summarize apps=make_set(AppDisplayName),ostypes=make_set(os) by UserPrincipalName,ConditionalAccessStatus,AuthenticationRequirement, TrustedLocation,trustType,isCompliant"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "parameters - 0"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{Menu} | count| render card",
              "size": 4,
              "title": "Count of objects found",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "gridSettings": {
                "rowLimit": 10000
              },
              "tileSettings": {
                "showBorder": false
              },
              "textSettings": {
                "style": "bignumber"
              }
            },
            "name": "query - 1"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{Menu}",
              "size": 2,
              "title": "Impacted Users, Applications, or Devices",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "gridSettings": {
                "rowLimit": 10000
              }
            },
            "name": "query - 1 - Copy"
          }
        ]
      },
      "name": "group - 0",
      "styleSettings": {
        "showBorder": true
      }
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
